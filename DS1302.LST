C51 COMPILER V9.01   DS1302                                                                01/06/2018 02:12:10 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE DS1302
OBJECT MODULE PLACED IN DS1302.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE DS1302.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "DS1302.h"
   2          #include <assert.h>
   3          //public variables
   4          //UI layer
   5          void initDS1302(void){
   6   1              P1 = 0;
   7   1              writeByte_1302 (WRITE_PROTECT,0X00);
   8   1              writeByte_1302 (WRITE_SECOND,0x00); 
   9   1              writeByte_1302 (WRITE_MINUTE,0x00); 
  10   1              writeByte_1302 (WRITE_HOUR,0x18); 
  11   1              writeByte_1302 (WRITE_DATE,0x04);
  12   1              writeByte_1302 (WRITE_MONTH,0x01); 
  13   1              writeByte_1302 (WRITE_WEEK,0x04); 
  14   1              writeByte_1302 (WRITE_YEAR,0x18); 
  15   1              writeByte_1302 (WRITE_PROTECT,0x80);
  16   1      }
  17          void setTime_1302(Time* time){          //read time from DS1302 and store the read data in Time pointer time
  18   1      
  19   1      }
*** WARNING C280 IN LINE 17 OF DS1302.C: 'time': unreferenced local variable
  20          void readTime_1302(Time *time){         //write the data from mem addr specified by Time pointer time to DS1302 
  21   1              time->second = BCDtoBIN(readByte_1302(READ_SECOND), 7);
  22   1              time->minute = BCDtoBIN(readByte_1302(READ_MINUTE), 7);
  23   1              time->hour = BCDtoBIN(readByte_1302(READ_HOUR), 6);
  24   1              //time->hourMode = readByte_1302(READ_SECOND);
  25   1              time->date = BCDtoBIN(readByte_1302(READ_DATE), 6);
  26   1              time->month = BCDtoBIN(readByte_1302(READ_MONTH), 6);
  27   1              time->year = BCDtoBIN(readByte_1302(READ_YEAR), 8);
  28   1              time->weekday = readByte_1302(READ_WEEK);
  29   1      }
  30          //internal implementation
  31          void writeByte_1302(uchar addr, uchar dat){     //write dat to specified addr
  32   1              RST_DS1302 = 0;
  33   1              _nop_();
  34   1              SCLK_DS1302 = 0;
  35   1              _nop_();
  36   1              RST_DS1302 = 1;
  37   1              _nop_();
  38   1              sendCom(addr);
  39   1              _nop_();
  40   1              sendCom(dat);
  41   1              _nop_();
  42   1              SCLK_DS1302=1;
  43   1              _nop_();
  44   1              RST_DS1302 = 0;                         
  45   1      }
  46          uchar readByte_1302(uchar addr){        //read a byte from specified DS1302
  47   1              uchar tempUc;
  48   1              RST_DS1302 = 0;
  49   1              _nop_();
  50   1              RST_DS1302 = 1;
  51   1              _nop_();
  52   1              SCLK_DS1302 = 0;
  53   1              _nop_();
  54   1              sendCom(addr);
C51 COMPILER V9.01   DS1302                                                                01/06/2018 02:12:10 PAGE 2   

  55   1              _nop_();
  56   1              tempUc = 0;
  57   1              //only if DS1302 is connected to P1
  58   1              for(; tempUc < 8; tempUc++){
  59   2                      ACC=ACC>>1;
  60   2                      ACC_7=IO_DS1302;
  61   2                      SCLK_DS1302=1;
  62   2                      SCLK_DS1302=0;
  63   2              }
  64   1              addr = ACC; 
  65   1              SCLK_DS1302 = 1;
  66   1              _nop_();
  67   1              RST_DS1302 = 0;
  68   1              return ACC;     
  69   1      }
  70          void sendCom(uchar addr){
  71   1              uchar tempUc;
  72   1              tempUc = 0;
  73   1              ACC = addr;
  74   1              for(; tempUc < 8; tempUc++){
  75   2                      IO_DS1302 = ACC_0;
  76   2                      _nop_();
  77   2                      SCLK_DS1302 = 1;
  78   2                      _nop_();
  79   2                      SCLK_DS1302 = 0;
  80   2                      ACC >>= 1;
  81   2              }       
  82   1      }
  83          uchar BCDtoBIN(uchar bcd, uchar length){
  84   1              uchar bin;
  85   1              bin = bcd & 0x0F;
  86   1              bin += (((bcd << (8 - length)) >> (4 + (8 - length))) & 0x0F) * 10; 
  87   1              return bin;
  88   1      }
  89          uchar* BINtoASCII(uchar bin, uchar* output){   //output: uchar[2]
  90   1              output[0] = bin % 10 + 48;
  91   1              output[1] = bin / 10 + 48;
  92   1              return output;
  93   1      }
  94          void displayStr(uchar* str, uchar length){
  95   1              for(; length > 0; length--){
  96   2                      SBUF = str[length - 1];
  97   2                      while(!TI);
  98   2                      TI = 0;
  99   2              }
 100   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    432    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
